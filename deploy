#!/bin/bash
#
# Copyright 2018 Jérôme Gasperi
#
# Licensed under the Apache License, version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

####### DO NOT TOUCH THIS ######
ENV_FILE=./config.env
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

PROJECT_NAME=resto
################################

#
# Force script to exit on error
#
set -e
err_report() {
    echo -e "${RED}[ERROR] Error on line $1 - see errors.log file ${NC}"
}
trap 'err_report $LINENO' ERR

#
# Help function
#
function showUsage {
    echo -e ""
    echo -e "Deploy a ${PROJECT_NAME} docker instance "
    echo -e ""
    echo -e "   Usage $0 <target> [options]"
    echo -e ""
    echo -e "   Where target is either \"prod\" for production, \"dev\" for development"
    echo -e ""
    echo -e "   Options:"
    echo -e ""
    echo -e "      -e | --envfile Environnement file (default is ${GREEN}config.env${NC})"
    echo -e "      -p | --projectName Project name (default is ${GREEN}${PROJECT_NAME}${NC})"
    echo -e "      -h | --help show this help"
    echo -e ""
    echo -e "      !!! This script requires docker and docker-compose !!!"
    echo -e ""
}
TARGET=""
while (( "$#" ));
do
	case "$1" in
        -e|--envfile)
            if [[ "$2" == "" || ${2:0:1} == "-" ]]; then
                showUsage
                echo -e "${RED}[ERROR] Missing config file name${NC}"
                echo -e ""
                exit 1
            fi
            ENV_FILE="$2"
            shift 2 # past argument
            ;;
        -p|--projectName)
            PROJECT_NAME="$2"
            if [[ "$2" == "" || "$2" == /- ]]; then
                showUsage
                echo -e "${RED}[ERROR] Missing project name${NC}"
                echo -e ""
                exit 1
            fi
            shift # past argument
            ;;
        -h|--help)
            showUsage
            shift # past argument
            exit 0
            ;;
        --) # end argument parsing
            shift
            break
            ;;
        -*|--*=) # unsupported flags
            showUsage
            echo -e "${RED}[ERROR] Unsupported flag $1${NC}"
            echo -e ""
            exit 1
            ;;
        *) # preserve positional arguments
            TARGET="$1"
            shift
            ;;
	esac
done

#
# TARGET is mandatory - should be "prod" or "dev"
#
if [[ "${TARGET}" == "" ]]; then
    showUsage
    echo -e "${RED}[ERROR] Missing target - choose between \"prod\" or \"dev\"${NC}"
    echo ""
    exit 1
fi

#
# The environement file is mandatory
# It contains all configuration to build and run resto images
#
if [[ ! -f ${ENV_FILE} ]]; then
    showUsage
    echo -e "${RED}[ERROR] The \"${ENV_FILE}\" file does not exist!${NC}"
    echo ""
    exit 1
fi

PUBLIC_ENDPOINT=$(grep ^PUBLIC_ENDPOINT= ${ENV_FILE} | awk -F= '{for (i=2; i<=NF; i++) print $i}'| xargs echo -n)
RESTO_EXPOSED_PORT=$(grep ^RESTO_EXPOSED_PORT= ${ENV_FILE} | awk -F= '{for (i=2; i<=NF; i++) print $i}'| xargs echo -n)
DATABASE_EXPOSED_PORT=$(grep ^DATABASE_EXPOSED_PORT= ${ENV_FILE} | awk -F= '{for (i=2; i<=NF; i++) print $i}'| xargs echo -n)
DATABASE_HOST=$(grep ^DATABASE_HOST= ${ENV_FILE} | awk -F= '{for (i=2; i<=NF; i++) print $i}'| xargs echo -n)
DATABASE_NAME=$(grep ^DATABASE_NAME= ${ENV_FILE} | awk -F= '{for (i=2; i<=NF; i++) print $i}'| xargs echo -n)
DATABASE_USER_NAME=$(grep ^DATABASE_USER_NAME= ${ENV_FILE} | awk -F= '{for (i=2; i<=NF; i++) print $i}'| xargs echo -n)
DATABASE_USER_PASSWORD=$(grep ^DATABASE_USER_PASSWORD= ${ENV_FILE} | awk -F= '{for (i=2; i<=NF; i++) print $i}'| xargs echo -n)

# Clean errors.log file
rm -f errors.log

echo -e "${YELLOW}[INFO] You're now running ${PROJECT_NAME} installation in **${TARGET}** mode${NC}"
echo -e "[INFO] Public endpoint is ${GREEN}${PUBLIC_ENDPOINT}${NC}"

#
# Containers are part of the external network "rnet" (resto network)
#
RNET_EXIST=$(docker network ls | grep rnet | wc | awk '{print $1}')
if [[ "${RNET_EXIST}" == "0" ]]; then
    echo -e "[INFO] Creating external network ${GREEN}rnet${NC}"
    docker network create rnet
else
    echo -e "[INFO] Using existing network ${GREEN}rnet${NC}"
fi

if [[ "${TARGET}" == "prod" ]]; then
    if [[ "${DATABASE_HOST}" == "restodb" ]]; then
        COMPOSE_FILE=docker-compose-restodb.yml:docker-compose.yml
    else
        COMPOSE_FILE=docker-compose.yml
    fi
else
    if [[ "${DATABASE_HOST}" == "restodb" ]]; then
        if [[ ! -f docker-compose.${TARGET}.yml ]]; then
            echo -e "${RED}[ERROR] The file docker-compose.${TARGET}.yml does not exist!${NC}"
            echo ""
            exit 1
        fi
        COMPOSE_FILE="docker-compose-restodb.yml:docker-compose.yml:docker-compose.${TARGET}.yml"
    else
        echo $DATABASE_HOST
        if [[ ! -f docker-compose-nodb.${TARGET}.yml ]]; then
            echo -e "${RED}[ERROR] The file docker-compose-nodb.${TARGET}.yml does not exist!${NC}"
            echo ""
            exit 1
        fi
        COMPOSE_FILE="docker-compose.yml:docker-compose-nodb.${TARGET}.yml"
    fi
fi

COMPOSE_FILE=${COMPOSE_FILE} \
RESTO_EXPOSED_PORT=${RESTO_EXPOSED_PORT} \
DATABASE_EXPOSED_PORT=${DATABASE_EXPOSED_PORT} \
DATABASE_HOST=${DATABASE_HOST} \
DATABASE_PORT=${DATABASE_PORT} \
DATABASE_NAME=${DATABASE_NAME} \
DATABASE_USER_NAME=${DATABASE_USER_NAME} \
DATABASE_USER_PASSWORD=${DATABASE_USER_PASSWORD} \
ENV_FILE=${ENV_FILE} \
docker-compose --project-name ${PROJECT_NAME}  build

COMPOSE_FILE=${COMPOSE_FILE} \
RESTO_EXPOSED_PORT=${RESTO_EXPOSED_PORT} \
DATABASE_EXPOSED_PORT=${DATABASE_EXPOSED_PORT} \
DATABASE_HOST=${DATABASE_HOST} \
DATABASE_PORT=${DATABASE_PORT} \
DATABASE_NAME=${DATABASE_NAME} \
DATABASE_USER_NAME=${DATABASE_USER_NAME} \
DATABASE_USER_PASSWORD=${DATABASE_USER_PASSWORD} \
ENV_FILE=${ENV_FILE} \
docker-compose --project-name ${PROJECT_NAME}  up -d

if [ "${DATABASE_HOST}" == "restodb" ] || [ "${DATABASE_HOST}" == "host.docker.internal" ]; then
    DATABASE_HOST_SEEN_FROM_DOCKERHOST=localhost
else
    DATABASE_HOST_SEEN_FROM_DOCKERHOST=${DATABASE_HOST}
fi

# Wait for database to be ready
echo -e "[INFO] Waiting for database: ${DATABASE_HOST_SEEN_FROM_DOCKERHOST}:${DATABASE_EXPOSED_PORT} to be ready..."
while ! pg_isready -h ${DATABASE_HOST_SEEN_FROM_DOCKERHOST} -U ${DATABASE_USER_NAME} -p ${DATABASE_EXPOSED_PORT} -d ${DATABASE_NAME} 2>/dev/null
do
    let elapsed=elapsed+1
    if [ "$elapsed" -gt 90 ] 
    then
        echo -e "${RED}[ERROR]${NC} Database startup timed out =("
        exit 1
    fi  
    sleep 1;
done

# Run database creation script if needed for external database
if [[ "${DATABASE_HOST}" != "restodb" ]]; then
  RESTO_EXISTS=$(PGPASSWORD=${DATABASE_USER_PASSWORD} psql -XAt -d ${DATABASE_NAME} -U ${DATABASE_USER_NAME} -h ${DATABASE_HOST_SEEN_FROM_DOCKERHOST} -p ${DATABASE_EXPOSED_PORT} -c "select count(*) from information_schema.routines where routine_name = 'st_splitdateline'")
  if [[ "${RESTO_EXISTS}" == "0" ]]; then
    echo -e "[INFO] No resto DB structure detected, creating one in db ${GREEN}${POSTGRES_DB}${NC}..."
    $(dirname $0)/scripts/installOnExternalDB.sh -e "${ENV_FILE}"
  fi
fi

#
# Create ADMIN_USER if not exist or update ADMIN_USER's password if it already exists
$(dirname $0)/scripts/createAdminUser.sh -e ${ENV_FILE}

echo -e ""

#
# Display mount point for database  
# MacOS X is a bit tricky - https://stackoverflow.com/questions/41273514/access-docker-volume-mountpoint-with-docker-for-mac
#
if [[ ! "$OSTYPE" == "darwin"* ]]; then
  if [[ "${DATABASE_HOST}" == "restodb" ]]; then
      MOUNT_POINT=$(docker volume inspect ${PROJECT_NAME}"_database_data"| grep Mountpoint | awk -F\" '{print $4}')
      echo -e "[INFO] Database mount point is ${GREEN}${MOUNT_POINT}${NC}"
  fi
fi

echo -e "[INFO] Application ${GREEN}${PROJECT_NAME}${NC} up and running locally in ${GREEN}${TARGET}${NC} mode at ${GREEN}${PUBLIC_ENDPOINT}${NC}"
echo ""
